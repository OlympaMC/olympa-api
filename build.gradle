plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://papermc.io/repo/repository/maven-public/')
    }
}

//Temporary fix
configurations {
    included
}

dependencies {
	api 'redis.clients:jedis:3.6.0'
    included group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.10'
    compileOnlyApi 'com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT'
    compileOnlyApi 'org.spigotmc:spigot:1.16.5-R0.1-SNAPSHOT'
    compileOnlyApi 'io.github.waterfallmc:waterfall-api:1.17-R0.1-SNAPSHOT'
    compileOnlyApi 'io.github.waterfallmc:waterfall-protocol:1.17-R0.1-SNAPSHOT'
    api group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    configurations.api.extendsFrom(configurations.included)
}

def getCheckedOutGitCommitHash() {
    def gitFolder = "$projectDir/.git/"
    def takeFromHash = 8
    /*
     * '.git/HEAD' contains either
     *      in case of detached head: the currently checked out commit hash
     *      otherwise: a reference to a file containing the current commit hash
     */
    def head = new File(gitFolder + "HEAD").text.split(":") // .git/HEAD
    def isCommit = head.length == 1 // e5a7c79edabbf7dd39888442df081b1c9d8e88fd
    // def isRef = head.length > 1     // ref: refs/heads/master

    if(isCommit) return head[0].trim().take(takeFromHash) // e5a7c79edabb

    def refHead = new File(gitFolder + head[1].trim()) // .git/refs/heads/master
    refHead.text.trim().take takeFromHash
}

group = 'fr.olympa'
version = '0.0.1-SNAPSHOT'
description = 'olympa-api'
java.sourceCompatibility = JavaVersion.VERSION_16

def fullVersion = description + '-' + version + '-' + getCheckedOutGitCommitHash()

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

jar {
	archiveFileName = 'OlympaAPI.jar'
	destinationDirectory = file('build')
    from {
        configurations.included.collect { it.isDirectory() ? it : zipTree(it)}
    }
}

processResources {
    filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
       "plugin_version": fullVersion
    ]
}

sourceSets {
    main {
        java {
            srcDirs = ['src/java']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
    forcore {
        java {
            srcDirs = ['src/java']
            exclude 'src/java/fr/olympa/api/common/provider/OlympaPlayerInformationsObject'
            exclude 'src/java/fr/olympa/api/common/provider/OlympaPlayerObject'
            exclude 'src/java/fr/olympa/api/common/provider/AccountProvider'
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
